/* 

This class is used for storing text during the process of generating source code. It exists for the additional functionality it provides as opposed to adding on to a basic String type.

Each method returns 'this' in order to allow the chaining of operations on the buffered source code.

*/

export class Buffer {
  #buffer;
  #indent;

  constructor() {
    this.#buffer = "";
    this.#indent = 0;
  }

  // Concatenate text on to the existing buffered text
  add(str) {
    this.#buffer += str;
    return this;
  }

  // Take a new line, adding in a number of spaces appropriate to the current level of indentation. This is especially important in languages with significant whitespace, such as Python.
  newline() {
    this.#buffer += "\n" + "  ".repeat(this.#indent);
    return this;
  }

  // Increments the level of indentation by 1. This means that the next line taken will be indented by an additional 2 spaces before any text is 'printed'. This level of indentation persists until the buffer is indented or dedented.
  indent() {
    this.#indent += 1;
    return this;
  }

  // Decrements the level of indentation by 1. The next line taken will be indented by 2 less spaces. The level of indentation cannot be less than 0.
  dedent() {
    this.#indent = Math.max(0, this.#indent - 1);
    return this;
  }

  // Deletes a specified number of lines preceding the buffer's current position. Useful for deleting tokens that would be generated by a transpiler, but not wanted in the current circumstances. (e.g., removing unnecessary 'end' keywords from Ruby 'if' statements with following 'else' statements)
  deleteLines(lines) {
    this.#buffer = this.#buffer.split('\n')
    this.#buffer = this.#buffer.slice(0, this.#buffer.length - (lines + 1)).join('\n')
    this.newline()

    return this
  }

  // Removes all trailing whitespace characters from the buffered text.
  trim() {
    let temp = this.#buffer.split("");
    let i = temp.length - 1;
    while (true) {
      if (temp[i] == " " || temp[i] == "\n") {
        i -= 1;
      }
      else {
        break;
      }
    }
    temp = temp.slice(0, i + 1);
    this.#buffer = temp.join("");
    return this;
  }

  // Returns the contents of the buffer.
  get() {
    return this.#buffer;
  }
}